// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/venus-messager/service (interfaces: IAddressService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	address "github.com/filecoin-project/go-address"
	types "github.com/filecoin-project/venus/venus-shared/types"
	messager "github.com/filecoin-project/venus/venus-shared/types/messager"
	gomock "github.com/golang/mock/gomock"
)

// MockIAddressService is a mock of IAddressService interface.
type MockIAddressService struct {
	ctrl     *gomock.Controller
	recorder *MockIAddressServiceMockRecorder
}

// MockIAddressServiceMockRecorder is the mock recorder for MockIAddressService.
type MockIAddressServiceMockRecorder struct {
	mock *MockIAddressService
}

// NewMockIAddressService creates a new mock instance.
func NewMockIAddressService(ctrl *gomock.Controller) *MockIAddressService {
	mock := &MockIAddressService{ctrl: ctrl}
	mock.recorder = &MockIAddressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddressService) EXPECT() *MockIAddressServiceMockRecorder {
	return m.recorder
}

// ActiveAddress mocks base method.
func (m *MockIAddressService) ActiveAddress(arg0 context.Context, arg1 address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActiveAddress indicates an expected call of ActiveAddress.
func (mr *MockIAddressServiceMockRecorder) ActiveAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveAddress", reflect.TypeOf((*MockIAddressService)(nil).ActiveAddress), arg0, arg1)
}

// ActiveAddresses mocks base method.
func (m *MockIAddressService) ActiveAddresses(arg0 context.Context) map[address.Address]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveAddresses", arg0)
	ret0, _ := ret[0].(map[address.Address]struct{})
	return ret0
}

// ActiveAddresses indicates an expected call of ActiveAddresses.
func (mr *MockIAddressServiceMockRecorder) ActiveAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveAddresses", reflect.TypeOf((*MockIAddressService)(nil).ActiveAddresses), arg0)
}

// DeleteAddress mocks base method.
func (m *MockIAddressService) DeleteAddress(arg0 context.Context, arg1 address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockIAddressServiceMockRecorder) DeleteAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockIAddressService)(nil).DeleteAddress), arg0, arg1)
}

// ForbiddenAddress mocks base method.
func (m *MockIAddressService) ForbiddenAddress(arg0 context.Context, arg1 address.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForbiddenAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForbiddenAddress indicates an expected call of ForbiddenAddress.
func (mr *MockIAddressServiceMockRecorder) ForbiddenAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForbiddenAddress", reflect.TypeOf((*MockIAddressService)(nil).ForbiddenAddress), arg0, arg1)
}

// GetAccountsOfSigner mocks base method.
func (m *MockIAddressService) GetAccountsOfSigner(arg0 context.Context, arg1 address.Address) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsOfSigner", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsOfSigner indicates an expected call of GetAccountsOfSigner.
func (mr *MockIAddressServiceMockRecorder) GetAccountsOfSigner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsOfSigner", reflect.TypeOf((*MockIAddressService)(nil).GetAccountsOfSigner), arg0, arg1)
}

// GetAddress mocks base method.
func (m *MockIAddressService) GetAddress(arg0 context.Context, arg1 address.Address) (*messager.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(*messager.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIAddressServiceMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIAddressService)(nil).GetAddress), arg0, arg1)
}

// HasAddress mocks base method.
func (m *MockIAddressService) HasAddress(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAddress", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAddress indicates an expected call of HasAddress.
func (mr *MockIAddressServiceMockRecorder) HasAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAddress", reflect.TypeOf((*MockIAddressService)(nil).HasAddress), arg0, arg1)
}

// ListActiveAddress mocks base method.
func (m *MockIAddressService) ListActiveAddress(arg0 context.Context) ([]*messager.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveAddress", arg0)
	ret0, _ := ret[0].([]*messager.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveAddress indicates an expected call of ListActiveAddress.
func (mr *MockIAddressServiceMockRecorder) ListActiveAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveAddress", reflect.TypeOf((*MockIAddressService)(nil).ListActiveAddress), arg0)
}

// ListAddress mocks base method.
func (m *MockIAddressService) ListAddress(arg0 context.Context) ([]*messager.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddress", arg0)
	ret0, _ := ret[0].([]*messager.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddress indicates an expected call of ListAddress.
func (mr *MockIAddressServiceMockRecorder) ListAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddress", reflect.TypeOf((*MockIAddressService)(nil).ListAddress), arg0)
}

// SaveAddress mocks base method.
func (m *MockIAddressService) SaveAddress(arg0 context.Context, arg1 *messager.Address) (types.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAddress", arg0, arg1)
	ret0, _ := ret[0].(types.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAddress indicates an expected call of SaveAddress.
func (mr *MockIAddressServiceMockRecorder) SaveAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddress", reflect.TypeOf((*MockIAddressService)(nil).SaveAddress), arg0, arg1)
}

// SetFeeParams mocks base method.
func (m *MockIAddressService) SetFeeParams(arg0 context.Context, arg1 *messager.AddressSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFeeParams", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFeeParams indicates an expected call of SetFeeParams.
func (mr *MockIAddressServiceMockRecorder) SetFeeParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeeParams", reflect.TypeOf((*MockIAddressService)(nil).SetFeeParams), arg0, arg1)
}

// SetSelectMsgNum mocks base method.
func (m *MockIAddressService) SetSelectMsgNum(arg0 context.Context, arg1 address.Address, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectMsgNum", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSelectMsgNum indicates an expected call of SetSelectMsgNum.
func (mr *MockIAddressServiceMockRecorder) SetSelectMsgNum(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectMsgNum", reflect.TypeOf((*MockIAddressService)(nil).SetSelectMsgNum), arg0, arg1, arg2)
}

// UpdateNonce mocks base method.
func (m *MockIAddressService) UpdateNonce(arg0 context.Context, arg1 address.Address, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNonce", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNonce indicates an expected call of UpdateNonce.
func (mr *MockIAddressServiceMockRecorder) UpdateNonce(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNonce", reflect.TypeOf((*MockIAddressService)(nil).UpdateNonce), arg0, arg1, arg2)
}

// WalletHas mocks base method.
func (m *MockIAddressService) WalletHas(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletHas", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletHas indicates an expected call of WalletHas.
func (mr *MockIAddressServiceMockRecorder) WalletHas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletHas", reflect.TypeOf((*MockIAddressService)(nil).WalletHas), arg0, arg1)
}
