// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/venus-messager/service (interfaces: IMessageService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	address "github.com/filecoin-project/go-address"
	internal "github.com/filecoin-project/venus-messager/mocks/internal"
	messager "github.com/filecoin-project/venus/venus-shared/types/messager"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
)

// MockIMessageService is a mock of IMessageService interface.
type MockIMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageServiceMockRecorder
}

// MockIMessageServiceMockRecorder is the mock recorder for MockIMessageService.
type MockIMessageServiceMockRecorder struct {
	mock *MockIMessageService
}

// NewMockIMessageService creates a new mock instance.
func NewMockIMessageService(ctrl *gomock.Controller) *MockIMessageService {
	mock := &MockIMessageService{ctrl: ctrl}
	mock.recorder = &MockIMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageService) EXPECT() *MockIMessageServiceMockRecorder {
	return m.recorder
}

// ClearUnFillMessage mocks base method.
func (m *MockIMessageService) ClearUnFillMessage(arg0 context.Context, arg1 address.Address) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUnFillMessage", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearUnFillMessage indicates an expected call of ClearUnFillMessage.
func (mr *MockIMessageServiceMockRecorder) ClearUnFillMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUnFillMessage", reflect.TypeOf((*MockIMessageService)(nil).ClearUnFillMessage), arg0, arg1)
}

// GetMessageByCid mocks base method.
func (m *MockIMessageService) GetMessageByCid(arg0 context.Context, arg1 cid.Cid) (*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByCid", arg0, arg1)
	ret0, _ := ret[0].(*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByCid indicates an expected call of GetMessageByCid.
func (mr *MockIMessageServiceMockRecorder) GetMessageByCid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByCid", reflect.TypeOf((*MockIMessageService)(nil).GetMessageByCid), arg0, arg1)
}

// GetMessageByFromAndNonce mocks base method.
func (m *MockIMessageService) GetMessageByFromAndNonce(arg0 context.Context, arg1 address.Address, arg2 uint64) (*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByFromAndNonce", arg0, arg1, arg2)
	ret0, _ := ret[0].(*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByFromAndNonce indicates an expected call of GetMessageByFromAndNonce.
func (mr *MockIMessageServiceMockRecorder) GetMessageByFromAndNonce(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByFromAndNonce", reflect.TypeOf((*MockIMessageService)(nil).GetMessageByFromAndNonce), arg0, arg1, arg2)
}

// GetMessageBySignedCid mocks base method.
func (m *MockIMessageService) GetMessageBySignedCid(arg0 context.Context, arg1 cid.Cid) (*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageBySignedCid", arg0, arg1)
	ret0, _ := ret[0].(*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageBySignedCid indicates an expected call of GetMessageBySignedCid.
func (mr *MockIMessageServiceMockRecorder) GetMessageBySignedCid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageBySignedCid", reflect.TypeOf((*MockIMessageService)(nil).GetMessageBySignedCid), arg0, arg1)
}

// GetMessageByUid mocks base method.
func (m *MockIMessageService) GetMessageByUid(arg0 context.Context, arg1 string) (*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByUid", arg0, arg1)
	ret0, _ := ret[0].(*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByUid indicates an expected call of GetMessageByUid.
func (mr *MockIMessageServiceMockRecorder) GetMessageByUid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByUid", reflect.TypeOf((*MockIMessageService)(nil).GetMessageByUid), arg0, arg1)
}

// GetMessageByUnsignedCid mocks base method.
func (m *MockIMessageService) GetMessageByUnsignedCid(arg0 context.Context, arg1 cid.Cid) (*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByUnsignedCid", arg0, arg1)
	ret0, _ := ret[0].(*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByUnsignedCid indicates an expected call of GetMessageByUnsignedCid.
func (mr *MockIMessageServiceMockRecorder) GetMessageByUnsignedCid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByUnsignedCid", reflect.TypeOf((*MockIMessageService)(nil).GetMessageByUnsignedCid), arg0, arg1)
}

// HasMessageByUid mocks base method.
func (m *MockIMessageService) HasMessageByUid(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMessageByUid", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMessageByUid indicates an expected call of HasMessageByUid.
func (mr *MockIMessageServiceMockRecorder) HasMessageByUid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMessageByUid", reflect.TypeOf((*MockIMessageService)(nil).HasMessageByUid), arg0, arg1)
}

// ListBlockedMessage mocks base method.
func (m *MockIMessageService) ListBlockedMessage(arg0 context.Context, arg1 *messager.MsgQueryParams, arg2 time.Duration) ([]*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlockedMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlockedMessage indicates an expected call of ListBlockedMessage.
func (mr *MockIMessageServiceMockRecorder) ListBlockedMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlockedMessage", reflect.TypeOf((*MockIMessageService)(nil).ListBlockedMessage), arg0, arg1, arg2)
}

// ListFailedMessage mocks base method.
func (m *MockIMessageService) ListFailedMessage(arg0 context.Context, arg1 *messager.MsgQueryParams) ([]*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFailedMessage", arg0, arg1)
	ret0, _ := ret[0].([]*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFailedMessage indicates an expected call of ListFailedMessage.
func (mr *MockIMessageServiceMockRecorder) ListFailedMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFailedMessage", reflect.TypeOf((*MockIMessageService)(nil).ListFailedMessage), arg0, arg1)
}

// ListMessage mocks base method.
func (m *MockIMessageService) ListMessage(arg0 context.Context, arg1 *messager.MsgQueryParams) ([]*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessage", arg0, arg1)
	ret0, _ := ret[0].([]*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessage indicates an expected call of ListMessage.
func (mr *MockIMessageServiceMockRecorder) ListMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessage", reflect.TypeOf((*MockIMessageService)(nil).ListMessage), arg0, arg1)
}

// ListMessageByAddress mocks base method.
func (m *MockIMessageService) ListMessageByAddress(arg0 context.Context, arg1 address.Address) ([]*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessageByAddress", arg0, arg1)
	ret0, _ := ret[0].([]*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessageByAddress indicates an expected call of ListMessageByAddress.
func (mr *MockIMessageServiceMockRecorder) ListMessageByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessageByAddress", reflect.TypeOf((*MockIMessageService)(nil).ListMessageByAddress), arg0, arg1)
}

// ListMessageByFromState mocks base method.
func (m *MockIMessageService) ListMessageByFromState(arg0 context.Context, arg1 address.Address, arg2 messager.MessageState, arg3 bool, arg4, arg5 int) ([]*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessageByFromState", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessageByFromState indicates an expected call of ListMessageByFromState.
func (mr *MockIMessageServiceMockRecorder) ListMessageByFromState(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessageByFromState", reflect.TypeOf((*MockIMessageService)(nil).ListMessageByFromState), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkBadMessage mocks base method.
func (m *MockIMessageService) MarkBadMessage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkBadMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkBadMessage indicates an expected call of MarkBadMessage.
func (mr *MockIMessageServiceMockRecorder) MarkBadMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkBadMessage", reflect.TypeOf((*MockIMessageService)(nil).MarkBadMessage), arg0, arg1)
}

// PushMessage mocks base method.
func (m *MockIMessageService) PushMessage(arg0 context.Context, arg1 *internal.Message, arg2 *messager.SendSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockIMessageServiceMockRecorder) PushMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockIMessageService)(nil).PushMessage), arg0, arg1, arg2)
}

// PushMessageWithId mocks base method.
func (m *MockIMessageService) PushMessageWithId(arg0 context.Context, arg1 string, arg2 *internal.Message, arg3 *messager.SendSpec) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessageWithId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushMessageWithId indicates an expected call of PushMessageWithId.
func (mr *MockIMessageServiceMockRecorder) PushMessageWithId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessageWithId", reflect.TypeOf((*MockIMessageService)(nil).PushMessageWithId), arg0, arg1, arg2, arg3)
}

// RecoverFailedMsg mocks base method.
func (m *MockIMessageService) RecoverFailedMsg(arg0 context.Context, arg1 address.Address) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverFailedMsg", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverFailedMsg indicates an expected call of RecoverFailedMsg.
func (mr *MockIMessageServiceMockRecorder) RecoverFailedMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverFailedMsg", reflect.TypeOf((*MockIMessageService)(nil).RecoverFailedMsg), arg0, arg1)
}

// ReplaceMessage mocks base method.
func (m *MockIMessageService) ReplaceMessage(arg0 context.Context, arg1 *messager.ReplacMessageParams) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceMessage", arg0, arg1)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceMessage indicates an expected call of ReplaceMessage.
func (mr *MockIMessageServiceMockRecorder) ReplaceMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceMessage", reflect.TypeOf((*MockIMessageService)(nil).ReplaceMessage), arg0, arg1)
}

// RepublishMessage mocks base method.
func (m *MockIMessageService) RepublishMessage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepublishMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepublishMessage indicates an expected call of RepublishMessage.
func (mr *MockIMessageServiceMockRecorder) RepublishMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepublishMessage", reflect.TypeOf((*MockIMessageService)(nil).RepublishMessage), arg0, arg1)
}

// Send mocks base method.
func (m *MockIMessageService) Send(arg0 context.Context, arg1 messager.QuickSendParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockIMessageServiceMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIMessageService)(nil).Send), arg0, arg1)
}

// UpdateAllFilledMessage mocks base method.
func (m *MockIMessageService) UpdateAllFilledMessage(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllFilledMessage", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAllFilledMessage indicates an expected call of UpdateAllFilledMessage.
func (mr *MockIMessageServiceMockRecorder) UpdateAllFilledMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllFilledMessage", reflect.TypeOf((*MockIMessageService)(nil).UpdateAllFilledMessage), arg0)
}

// UpdateFilledMessageByID mocks base method.
func (m *MockIMessageService) UpdateFilledMessageByID(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilledMessageByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilledMessageByID indicates an expected call of UpdateFilledMessageByID.
func (mr *MockIMessageServiceMockRecorder) UpdateFilledMessageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilledMessageByID", reflect.TypeOf((*MockIMessageService)(nil).UpdateFilledMessageByID), arg0, arg1)
}

// UpdateMessageStateByID mocks base method.
func (m *MockIMessageService) UpdateMessageStateByID(arg0 context.Context, arg1 string, arg2 messager.MessageState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageStateByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageStateByID indicates an expected call of UpdateMessageStateByID.
func (mr *MockIMessageServiceMockRecorder) UpdateMessageStateByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageStateByID", reflect.TypeOf((*MockIMessageService)(nil).UpdateMessageStateByID), arg0, arg1, arg2)
}

// WaitMessage mocks base method.
func (m *MockIMessageService) WaitMessage(arg0 context.Context, arg1 string, arg2 uint64) (*messager.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*messager.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitMessage indicates an expected call of WaitMessage.
func (mr *MockIMessageServiceMockRecorder) WaitMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitMessage", reflect.TypeOf((*MockIMessageService)(nil).WaitMessage), arg0, arg1, arg2)
}
